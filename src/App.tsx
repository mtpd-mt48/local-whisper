import React, { useState, useRef } from 'react';
import { Upload, FileAudio, FileVideo, Check, X, Copy, Download, Edit } from 'lucide-react';
import FileUpload from './components/FileUpload';
import TranscriptionOptions from './components/TranscriptionOptions';
import ProgressIndicator from './components/ProgressIndicator';
import TranscriptionResult from './components/TranscriptionResult';

function App() {
  const [file, setFile] = useState<File | null>(null);
  const [transcriptionFormat, setTranscriptionFormat] = useState<string>('plain');
  const [whisperModel, setWhisperModel] = useState<string>('base');
  const [transcriptionProgress, setTranscriptionProgress] = useState<number>(0);
  const [transcriptionResult, setTranscriptionResult] = useState<string>('');
  const [error, setError] = useState<string>('');

  const handleFileUpload = (uploadedFile: File) => {
    setFile(uploadedFile);
    setError('');
  };

  const handleTranscribe = async () => {
    if (!file) {
      setError('Please upload a file first.');
      return;
    }

    setTranscriptionProgress(0);
    setTranscriptionResult('');
    setError('');

    try {
      // Simulating transcription process
      for (let i = 0; i <= 100; i += 10) {
        setTranscriptionProgress(i);
        await new Promise(resolve => setTimeout(resolve, 500));
      }

      // In a real application, you would send the file to your backend for processing with Whisper AI
      // const formData = new FormData();
      // formData.append('file', file);
      // formData.append('format', transcriptionFormat);
      // formData.append('model', whisperModel);
      // const response = await fetch('/api/transcribe', { method: 'POST', body: formData });
      // const result = await response.json();
      // setTranscriptionResult(result.transcription);

      // Simulated result
      setTranscriptionResult("This is a simulated transcription result. In a real application, this text would be generated by the Whisper AI model based on the uploaded audio or video file.");
    } catch (err) {
      setError('An error occurred during transcription. Please try again.');
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center">
      <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-2xl">
        <h1 className="text-3xl font-bold mb-6 text-center">Whisper AI Transcription</h1>
        
        <FileUpload onFileUpload={handleFileUpload} />
        
        {file && (
          <TranscriptionOptions
            transcriptionFormat={transcriptionFormat}
            setTranscriptionFormat={setTranscriptionFormat}
            whisperModel={whisperModel}
            setWhisperModel={setWhisperModel}
          />
        )}
        
        {transcriptionProgress > 0 && transcriptionProgress < 100 && (
          <ProgressIndicator progress={transcriptionProgress} />
        )}
        
        {transcriptionResult && (
          <TranscriptionResult
            result={transcriptionResult}
            format={transcriptionFormat}
          />
        )}
        
        {error && (
          <div className="mt-4 p-3 bg-red-100 text-red-700 rounded">
            {error}
          </div>
        )}
        
        <button
          onClick={handleTranscribe}
          disabled={!file}
          className="mt-6 w-full bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 disabled:bg-gray-300 disabled:cursor-not-allowed"
        >
          Transcribe
        </button>
      </div>
    </div>
  );
}

export default App;